{
  "version": 3,
  "sources": ["../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/Utils.ts", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/createDatabaseTransaction.ts", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/createReadonlyTransaction.ts", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/createReadwriteTransaction.ts", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/index.tsx", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/indexed-context.tsx", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/indexed-db.ts", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/src/indexed-hooks.ts", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/external commonjs \"react\"", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/webpack/bootstrap", "../../../../.yarn/__virtual__/react-indexed-db-hook-virtual-ecd02d752c/0/cache/react-indexed-db-hook-npm-1.0.14-8b325bc1ba-a6dd1bd7ec.zip/node_modules/react-indexed-db-hook/lib/webpack:/react-indexed-db-hook/webpack/startup"],
  "sourcesContent": ["export interface Options {\n  storeName: string;\n  dbMode: IDBTransactionMode;\n  error: (e: Event) => any;\n  complete: (e: Event) => any;\n  abort?: any;\n}\n\nexport function validateStoreName(db: IDBDatabase, storeName: string) {\n  return db.objectStoreNames.contains(storeName);\n}\n\nexport function validateBeforeTransaction(\n  db: IDBDatabase,\n  storeName: string,\n  reject: (errorMessage: string) => void,\n) {\n  if (!db) {\n    reject(\n      \"You need to use the openDatabase function to create a database before you query it!\",\n    );\n  }\n  if (!validateStoreName(db, storeName)) {\n    reject(`objectStore does not exists: ${storeName}`);\n  }\n}\n\nexport function createTransaction(\n  db: IDBDatabase,\n  options: Options,\n): IDBTransaction {\n  const trans: IDBTransaction = db.transaction(\n    options.storeName,\n    options.dbMode,\n  );\n  trans.onerror = options.error;\n  trans.oncomplete = options.complete;\n  trans.onabort = options.abort;\n  return trans;\n}\n\nexport function optionsGenerator(\n  type: any,\n  storeName: any,\n  reject: (e: Event) => void,\n  resolve: (e?: Event) => void,\n): Options {\n  return {\n    storeName: storeName,\n    dbMode: type,\n    error: (e: Event) => {\n      reject(e);\n    },\n    complete: () => {\n      resolve();\n    },\n    abort: (e: Event) => {\n      reject(e);\n    },\n  };\n}\n\n// export function* processRequest({ request, success, error }: any) {\n//   request.onerror = function(event: Event) {\n//     error(error);\n//     yield error;\n//   };\n//   request.onsuccess = function(evt: Event) {\n//     let cursor: IDBCursorWithValue = (<IDBRequest>evt.target).result;\n//     if (cursor) {\n//       result.push(cursor.value);\n//       cursor.continue();\n//     } else {\n//       resolve(result);\n//     }\n//   };\n// }\n", "import {\n  createTransaction as defaultCreateTransaction,\n  optionsGenerator as defaultOptionsBuilder,\n} from \"./Utils\";\nimport { DBMode } from \"./indexed-db\";\n\nexport function createDatabaseTransaction(\n  database: IDBDatabase,\n  mode: DBMode,\n  storeName: string,\n  resolve: (e?: Event) => void,\n  reject: (e: Event) => void,\n  createTransaction: typeof defaultCreateTransaction = defaultCreateTransaction,\n  buildOptions: typeof defaultOptionsBuilder = defaultOptionsBuilder,\n) {\n  const options = buildOptions(mode, storeName, reject, resolve);\n  const transaction: IDBTransaction = createTransaction(database, options);\n  const store = transaction.objectStore(storeName);\n\n  return {\n    store,\n    transaction,\n  };\n}\n", "import { DBMode } from \"./indexed-db\";\nimport { createDatabaseTransaction } from \"./createDatabaseTransaction\";\n\nexport function createReadonlyTransaction(\n  database: IDBDatabase,\n  store: string,\n  resolve: (payload?: any) => void,\n  reject: (e: Event) => void,\n) {\n  return createDatabaseTransaction(\n    database,\n    DBMode.readonly,\n    store,\n    resolve,\n    reject,\n  );\n}\n", "import { DBMode } from \"./indexed-db\";\nimport { createDatabaseTransaction } from \"./createDatabaseTransaction\";\n\nexport function createReadwriteTransaction(\n  database: IDBDatabase,\n  store: string,\n  resolve: (e?: any) => void,\n  reject: (e: Event) => void,\n) {\n  return createDatabaseTransaction(\n    database,\n    DBMode.readwrite,\n    store,\n    resolve,\n    reject,\n  );\n}\n", "export { AccessDB, IndexedDB } from \"./indexed-context\";\nexport * from \"./indexed-hooks\";\n", "import React, { ReactNode } from \"react\";\nimport { DBOperations, openDatabase, Key } from \"./indexed-db\";\n\ninterface IndexedDBProps {\n  name: string;\n  version: number;\n  children: ReactNode;\n  objectStoresMeta: ObjectStoreMeta[];\n}\n\ninterface ObjectStoreMeta {\n  store: string;\n  storeConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n  storeSchema: ObjectStoreSchema[];\n}\n\ninterface ObjectStoreSchema {\n  name: string;\n  keypath: string;\n  options: { unique: boolean; [key: string]: any };\n}\n\nconst IndexedDBContext = React.createContext<{\n  db: any;\n  name: string;\n  version: number;\n}>({\n  db: null,\n  name: null,\n  version: null,\n});\n\nconst IndexedDBProvider = IndexedDBContext.Provider;\nconst IndexedDBCosumer = IndexedDBContext.Consumer;\n\nexport function IndexedDB({\n  name,\n  version,\n  children,\n  objectStoresMeta,\n}: IndexedDBProps) {\n  objectStoresMeta.forEach(async (schema: ObjectStoreMeta) => {\n    await openDatabase(name, version, (event: any) => {\n      const db: IDBDatabase = event.currentTarget.result;\n      const objectStore = db.createObjectStore(\n        schema.store,\n        schema.storeConfig,\n      );\n      schema.storeSchema.forEach((schema: ObjectStoreSchema) => {\n        objectStore.createIndex(schema.name, schema.keypath, schema.options);\n      });\n    });\n  });\n  return (\n    <IndexedDBProvider value={{ db: null, name, version }}>\n      {children}\n    </IndexedDBProvider>\n  );\n}\n\ninterface AccessDBProps {\n  children: ({\n    db,\n  }: {\n    db: IDBDatabase;\n    add: <T = any>(value: T, key?: any) => Promise<number>;\n    getByID: <T = any>(id: number | string) => Promise<T>;\n    getAll: <T = any>() => Promise<T[]>;\n    update: <T = any>(value: T, key?: any) => Promise<any>;\n    deleteRecord: (key: Key) => Promise<any>;\n    openCursor: (\n      cursorCallback: (event: Event) => void,\n      keyRange?: IDBKeyRange,\n    ) => Promise<void>;\n    getByIndex: (indexName: string, key: any) => Promise<any>;\n    clear: () => Promise<any>;\n  }) => ReactNode;\n  objectStore: string;\n}\n\nexport function AccessDB({ children, objectStore }: AccessDBProps) {\n  return (\n    <IndexedDBCosumer>\n      {(value) => {\n        const { db, name, version } = value;\n        // openDatabase(name, version);\n        return children({ db, ...DBOperations(name, version, objectStore) });\n      }}\n    </IndexedDBCosumer>\n  );\n}\n", "import { useCallback } from \"react\";\nimport { validateBeforeTransaction } from \"./Utils\";\nimport { ObjectStoreMeta, ObjectStoreSchema } from \"./indexed-hooks\";\nimport { createReadwriteTransaction } from \"./createReadwriteTransaction\";\nimport { createReadonlyTransaction } from \"./createReadonlyTransaction\";\n\nexport type Key =\n  | string\n  | number\n  | Date\n  | ArrayBufferView\n  | ArrayBuffer\n  | IDBKeyRange; // IDBArrayKey\nexport interface IndexDetails {\n  indexName: string;\n  order: string;\n}\nconst indexedDB: IDBFactory =\n  window.indexedDB ||\n  (<any>window).mozIndexedDB ||\n  (<any>window).webkitIndexedDB ||\n  (<any>window).msIndexedDB;\n\nexport function openDatabase(\n  dbName: string,\n  version: number,\n  upgradeCallback?: (e: Event, db: IDBDatabase) => void,\n) {\n  return new Promise<IDBDatabase>((resolve, reject) => {\n    const request = indexedDB.open(dbName, version);\n    let db: IDBDatabase;\n    request.onsuccess = () => {\n      db = request.result;\n      resolve(db);\n    };\n    request.onerror = () => {\n      reject(`IndexedDB error: ${request.error}`);\n    };\n    if (typeof upgradeCallback === \"function\") {\n      request.onupgradeneeded = (event: Event) => {\n        upgradeCallback(event, db);\n      };\n    }\n  });\n}\n\nexport function CreateObjectStore(\n  dbName: string,\n  version: number,\n  storeSchemas: ObjectStoreMeta[],\n) {\n  const request: IDBOpenDBRequest = indexedDB.open(dbName, version);\n\n  request.onupgradeneeded = function (event: IDBVersionChangeEvent) {\n    const database: IDBDatabase = (event.target as any).result;\n    storeSchemas.forEach((storeSchema: ObjectStoreMeta) => {\n      if (!database.objectStoreNames.contains(storeSchema.store)) {\n        const objectStore = database.createObjectStore(\n          storeSchema.store,\n          storeSchema.storeConfig,\n        );\n        storeSchema.storeSchema.forEach((schema: ObjectStoreSchema) => {\n          objectStore.createIndex(schema.name, schema.keypath, schema.options);\n        });\n      }\n    });\n    database.close();\n  };\n  request.onsuccess = function (e: any) {\n    e.target.result.close();\n  };\n}\n\nexport function DBOperations(\n  dbName: string,\n  version: number,\n  currentStore: string,\n) {\n  // Readonly operations\n  const getAll = <T>() =>\n    new Promise<T[]>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { store } = createReadonlyTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n        const request = store.getAll();\n\n        request.onerror = (error) => reject(error);\n\n        request.onsuccess = function ({ target: { result } }: any) {\n          resolve(result as T[]);\n        };\n      });\n    });\n\n  const getByID = <T>(id: string | number) =>\n    new Promise<T>((resolve, reject) => {\n      openDatabase(dbName, version).then((db: IDBDatabase) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { store } = createReadonlyTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n        const request = store.get(id);\n\n        request.onsuccess = function (event: Event) {\n          resolve((event.target as any).result as T);\n        };\n      });\n    });\n\n  const openCursor = (\n    cursorCallback: (event: Event) => void,\n    keyRange?: IDBKeyRange,\n  ) => {\n    return new Promise<void>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { store } = createReadonlyTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n        const request = store.openCursor(keyRange);\n\n        request.onsuccess = (event: Event) => {\n          cursorCallback(event);\n          resolve();\n        };\n      });\n    });\n  };\n\n  const getByIndex = (indexName: string, key: any) =>\n    new Promise<any>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { store } = createReadonlyTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n        const index = store.index(indexName);\n        const request = index.get(key);\n\n        request.onsuccess = (event: Event) => {\n          resolve((<IDBOpenDBRequest>event.target).result);\n        };\n      });\n    });\n\n  // Readwrite operations\n  const add = <T>(value: T, key?: any) =>\n    new Promise<number>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        const { store } = createReadwriteTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n        const request = store.add(value, key);\n\n        request.onsuccess = (evt: any) => {\n          key = evt.target.result;\n          resolve(key);\n        };\n\n        request.onerror = (error) => reject(error);\n      });\n    });\n\n  const update = <T>(value: T, key?: any) =>\n    new Promise<any>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { transaction, store } = createReadwriteTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n\n        transaction.oncomplete = (event) => resolve(event);\n\n        store.put(value, key);\n      });\n    });\n\n  const deleteRecord = (key: Key) =>\n    new Promise<any>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { store } = createReadwriteTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n        const request = store.delete(key);\n\n        request.onsuccess = (event) => resolve(event);\n      });\n    });\n\n  const clear = () =>\n    new Promise<void>((resolve, reject) => {\n      openDatabase(dbName, version).then((db) => {\n        validateBeforeTransaction(db, currentStore, reject);\n        const { store, transaction } = createReadwriteTransaction(\n          db,\n          currentStore,\n          resolve,\n          reject,\n        );\n\n        transaction.oncomplete = () => resolve();\n\n        store.clear();\n      });\n    });\n\n  return {\n    add,\n    getByID,\n    getAll,\n    update,\n    deleteRecord,\n    clear,\n    openCursor,\n    getByIndex,\n  };\n}\n\nexport enum DBMode {\n  readonly = \"readonly\",\n  readwrite = \"readwrite\",\n}\n", "import { useMemo } from \"react\";\nimport { DBOperations, Key, CreateObjectStore } from \"./indexed-db\";\n\nexport interface IndexedDBProps {\n  name: string;\n  version: number;\n  objectStoresMeta: ObjectStoreMeta[];\n}\n\nexport interface ObjectStoreMeta {\n  store: string;\n  storeConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n  storeSchema: ObjectStoreSchema[];\n}\n\nexport interface ObjectStoreSchema {\n  name: string;\n  keypath: string;\n  options: { unique: boolean; [key: string]: any };\n}\n\nexport interface useIndexedDB {\n  dbName: string;\n  version: number;\n  objectStore: string;\n}\n\nconst indexeddbConfiguration: { version: number; name: string } = {\n  version: null,\n  name: null,\n};\n\nexport function initDB({ name, version, objectStoresMeta }: IndexedDBProps) {\n  indexeddbConfiguration.name = name;\n  indexeddbConfiguration.version = version;\n  Object.freeze(indexeddbConfiguration);\n  CreateObjectStore(name, version, objectStoresMeta);\n}\n\nexport function useIndexedDB(objectStore: string): {\n  add: <T = any>(value: T, key?: any) => Promise<number>;\n  getByID: <T = any>(id: number | string) => Promise<T>;\n  getAll: <T = any>() => Promise<T[]>;\n  update: <T = any>(value: T, key?: any) => Promise<any>;\n  deleteRecord: (key: Key) => Promise<any>;\n  openCursor: (\n    cursorCallback: (event: Event) => void,\n    keyRange?: IDBKeyRange,\n  ) => Promise<void>;\n  getByIndex: (indexName: string, key: any) => Promise<any>;\n  clear: () => Promise<any>;\n} {\n  if (!indexeddbConfiguration.name || !indexeddbConfiguration.version) {\n    throw new Error(\"Please, initialize the DB before the use.\");\n  }\n  return useMemo(\n    () =>\n      DBOperations(\n        indexeddbConfiguration.name,\n        indexeddbConfiguration.version,\n        objectStore,\n      ),\n    [indexeddbConfiguration, objectStore],\n  );\n}\n", "module.exports = require(\"react\");", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(629);\n"],
  "mappings": ";;;;;;;;;;;;;AAQA,iBAAgBA,GAAkBC,IAAiBC,IAAAA;AACjD,iBAAOD,GAAGE,iBAAiBC,SAASF,EAAAA;QACtC;AAAA,eAAA,eAAAG,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,mBAAAA,GAAA,oBAAAA,GAAA,4BAAAA,GAAA,oBAAA,QAFAA,GAAA,oBAAAC,IAIAD,GAAA,4BAAA,SACEJ,IACAC,IACAK,GAAAA;AAEKN,UAAAA,MACHM,EACE,qFAAA,GAGCP,GAAkBC,IAAIC,EAAAA,KACzBK,EAAO,gCAAA,OAAgCL,EAAAA,CAAAA;QAE3C,GAEAG,GAAA,oBAAA,SACEJ,IACAO,IAAAA;AAEA,cAAMC,KAAwBR,GAAGS,YAC/BF,GAAQN,WACRM,GAAQG,MAAAA;AAKV,iBAHAF,GAAMG,UAAUJ,GAAQK,OACxBJ,GAAMK,aAAaN,GAAQO,UAC3BN,GAAMO,UAAUR,GAAQS,OACjBR;QACT,GAEAJ,GAAA,mBAAA,SACEa,IACAhB,IACAK,IACAY,GAAAA;AAEA,iBAAO,EACLjB,WAAWA,IACXS,QAAQO,IACRL,OAAO,SAACO,IAAAA;AACNb,YAAAA,GAAOa,EAAAA;UACT,GACAL,UAAU,WAAA;AACRI,cAAAA;UACF,GACAF,OAAO,SAACG,IAAAA;AACNb,YAAAA,GAAOa,EAAAA;UACT,EAAA;QAEJ;MAAA,GAAA,KAAA,CAAAA,IAAAf,IAAAC,OAAA;AAAA,eAAA,eAAAD,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,4BAAA;AC5DA,YAAA,IAAAC,GAAA,GAAA;AAMA,QAAAD,GAAA,4BAAA,SACEgB,IACAC,IACApB,IACAiB,GACAZ,GACAgB,GACAC,GAAAA;AAAAA,qBADAD,MAAAA,IAAqD,EAAA,oBAAA,WACrDC,MAAAA,IAA6C,EAAA;AAE7C,cACMd,IAA8Ba,EAAkBF,IADtCG,EAAaF,IAAMpB,IAAWK,GAAQY,CAAAA,CAAAA;AAItD,iBAAO,EACLM,OAHYf,EAAYgB,YAAYxB,EAAAA,GAIpCQ,aAAW,EAAA;QAEf;MAAA,GAAA,KAAA,CAAAU,IAAAf,IAAAC,OAAA;AAAA,eAAA,eAAAD,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,4BAAA;ACvBA,YAAA,IAAAC,GAAA,EAAA,GACA,IAAAA,GAAA,GAAA;AAEA,QAAAD,GAAA,4BAAA,SACEgB,IACAI,IACAN,IACAZ,GAAAA;AAEA,kBAAO,GAAA,EAAAoB,2BACLN,IACA,EAAAO,OAAOC,UACPJ,IACAN,IACAZ,CAAAA;QAEJ;MAAA,GAAA,KAAA,CAAAa,IAAAf,IAAAC,OAAA;AAAA,eAAA,eAAAD,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,6BAAA;AChBA,YAAA,IAAAC,GAAA,EAAA,GACA,IAAAA,GAAA,GAAA;AAEA,QAAAD,GAAA,6BAAA,SACEgB,IACAI,IACAN,IACAZ,GAAAA;AAEA,kBAAO,GAAA,EAAAoB,2BACLN,IACA,EAAAO,OAAOE,WACPL,IACAN,IACAZ,CAAAA;QAEJ;MAAA,GAAA,KAAA,SAAAa,IAAAf,IAAAC,IAAA;AAAA,YAAA,IAAA,QAAA,KAAA,oBAAA,OAAA,SAAA,SAAAc,IAAAf,IAAAC,IAAAyB,IAAA;AAAA,qBAAAA,OAAAA,KAAAzB;AAAA,cAAA0B,KAAA,OAAA,yBAAA3B,IAAAC,EAAA;AAAA,UAAA0B,MAAA,EAAA,SAAAA,KAAA,CAAA3B,GAAA,aAAA2B,GAAA,YAAAA,GAAA,kBAAAA,KAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,mBAAA3B,GAAAC,EAAA;UAAA,EAAA,IAAA,OAAA,eAAAc,IAAAW,IAAAC,EAAA;QAAA,IAAA,SAAAZ,IAAAf,IAAAC,IAAAyB,IAAA;AAAA,qBAAAA,OAAAA,KAAAzB,KAAAc,GAAAW,EAAA,IAAA1B,GAAAC,EAAA;QAAA,IAAA,IAAA,QAAA,KAAA,gBAAA,SAAAc,IAAAf,IAAA;AAAA,mBAAAC,MAAAc,GAAA,eAAAd,MAAA,OAAA,UAAA,eAAA,KAAAD,IAAAC,EAAA,KAAA,EAAAD,IAAAe,IAAAd,EAAA;QAAA;AAAA,eAAA,eAAAD,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,YAAAA,GAAA,WAAA;AChBA,YAAA,IAAAC,GAAA,CAAA;AAAS,eAAA,eAAAD,IAAA,YAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,iBAAA,EAAA4B;QAAQ,EAAA,CAAA,GAAE,OAAA,eAAA5B,IAAA,aAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,iBAAA,EAAA6B;QAAS,EAAA,CAAA,GAC5B,EAAA5B,GAAA,GAAA,GAAAD,EAAA;MAAA,GAAA,GAAA,SAAAe,IAAAf,IAAAC,IAAA;AAAA,YAAA,IAAA,QAAA,KAAA,YAAA,WAAA;AAAA,iBAAA,IAAA,OAAA,UAAA,SAAAc,IAAA;AAAA,qBAAAf,IAAAC,KAAA,GAAAyB,KAAA,UAAA,QAAAzB,KAAAyB,IAAAzB,KAAA,UAAA0B,MAAA3B,KAAA,UAAAC,EAAA,EAAA,QAAA,UAAA,eAAA,KAAAD,IAAA2B,EAAA,MAAAZ,GAAAY,EAAA,IAAA3B,GAAA2B,EAAA;AAAA,mBAAAZ;UAAA,GAAA,EAAA,MAAA,MAAA,SAAA;QAAA,GAAA,IAAA,QAAA,KAAA,aAAA,SAAAA,IAAAf,IAAAC,IAAAyB,IAAA;AAAA,iBAAA,KAAAzB,OAAAA,KAAA,UAAA,SAAA0B,IAAAG,IAAA;AAAA,qBAAAC,GAAAhB,IAAA;AAAA,kBAAA;AAAA,gBAAAiB,GAAAN,GAAA,KAAAX,EAAA,CAAA;cAAA,SAAAA,IAAA;AAAA,gBAAAe,GAAAf,EAAA;cAAA;YAAA;AAAA,qBAAAkB,GAAAlB,IAAA;AAAA,kBAAA;AAAA,gBAAAiB,GAAAN,GAAA,MAAAX,EAAA,CAAA;cAAA,SAAAA,IAAA;AAAA,gBAAAe,GAAAf,EAAA;cAAA;YAAA;AAAA,qBAAAiB,GAAAjB,IAAA;AAAA,kBAAAf;AAAA,cAAAe,GAAA,OAAAY,GAAAZ,GAAA,KAAA,KAAAf,KAAAe,GAAA,OAAAf,cAAAC,KAAAD,KAAA,IAAAC,GAAA,SAAAc,IAAA;AAAA,gBAAAA,GAAAf,EAAA;cAAA,CAAA,GAAA,KAAA+B,IAAAE,EAAA;YAAA;AAAA,YAAAD,IAAAN,KAAAA,GAAA,MAAAX,IAAAf,MAAA,CAAA,CAAA,GAAA,KAAA,CAAA;UAAA,CAAA;QAAA,GAAA,IAAA,QAAA,KAAA,eAAA,SAAAe,IAAAf,IAAA;AAAA,cAAAC,IAAAyB,IAAAC,IAAAG,IAAAC,KAAA,EAAA,OAAA,GAAA,MAAA,WAAA;AAAA,gBAAA,IAAAJ,GAAA,CAAA,EAAA,OAAAA,GAAA,CAAA;AAAA,mBAAAA,GAAA,CAAA;UAAA,GAAA,MAAA,CAAA,GAAA,KAAA,CAAA,EAAA;AAAA,iBAAAG,KAAA,EAAA,MAAAG,GAAA,CAAA,GAAA,OAAAA,GAAA,CAAA,GAAA,QAAAA,GAAA,CAAA,EAAA,GAAA,cAAA,OAAA,WAAAH,GAAA,OAAA,QAAA,IAAA,WAAA;AAAA,mBAAA;UAAA,IAAAA;AAAA,mBAAAG,GAAAH,IAAA;AAAA,mBAAA,SAAAG,IAAA;AAAA,qBAAA,SAAAH,IAAA;AAAA,oBAAA7B,GAAA,OAAA,IAAA,UAAA,iCAAA;AAAA,uBAAA8B,KAAA,KAAA;AAAA,sBAAA9B,KAAA,GAAAyB,OAAAC,KAAA,IAAAG,GAAA,CAAA,IAAAJ,GAAA,SAAAI,GAAA,CAAA,IAAAJ,GAAA,WAAAC,KAAAD,GAAA,WAAAC,GAAA,KAAAD,EAAA,GAAA,KAAAA,GAAA,SAAA,EAAAC,KAAAA,GAAA,KAAAD,IAAAI,GAAA,CAAA,CAAA,GAAA,KAAA,QAAAH;AAAA,0BAAAD,KAAA,GAAAC,OAAAG,KAAA,CAAA,IAAAA,GAAA,CAAA,GAAAH,GAAA,KAAA,IAAAG,GAAA,CAAA,GAAA;oBAAA,KAAA;oBAAA,KAAA;AAAA,sBAAAH,KAAAG;AAAA;oBAAA,KAAA;AAAA,6BAAAC,GAAA,SAAA,EAAA,OAAAD,GAAA,CAAA,GAAA,MAAA,MAAA;oBAAA,KAAA;AAAA,sBAAAC,GAAA,SAAAL,KAAAI,GAAA,CAAA,GAAAA,KAAA,CAAA,CAAA;AAAA;oBAAA,KAAA;AAAA,sBAAAA,KAAAC,GAAA,IAAA,IAAA,GAAAA,GAAA,KAAA,IAAA;AAAA;oBAAA;AAAA,0BAAA,GAAAJ,MAAAA,KAAAI,GAAA,MAAA,SAAA,KAAAJ,GAAAA,GAAA,SAAA,CAAA,MAAA,MAAAG,GAAA,CAAA,KAAA,MAAAA,GAAA,CAAA,IAAA;AAAA,wBAAAC,KAAA;AAAA;sBAAA;AAAA,0BAAA,MAAAD,GAAA,CAAA,MAAA,CAAAH,MAAAG,GAAA,CAAA,IAAAH,GAAA,CAAA,KAAAG,GAAA,CAAA,IAAAH,GAAA,CAAA,IAAA;AAAA,wBAAAI,GAAA,QAAAD,GAAA,CAAA;AAAA;sBAAA;AAAA,0BAAA,MAAAA,GAAA,CAAA,KAAAC,GAAA,QAAAJ,GAAA,CAAA,GAAA;AAAA,wBAAAI,GAAA,QAAAJ,GAAA,CAAA,GAAAA,KAAAG;AAAA;sBAAA;AAAA,0BAAAH,MAAAI,GAAA,QAAAJ,GAAA,CAAA,GAAA;AAAA,wBAAAI,GAAA,QAAAJ,GAAA,CAAA,GAAAI,GAAA,IAAA,KAAAD,EAAA;AAAA;sBAAA;AAAA,sBAAAH,GAAA,CAAA,KAAAI,GAAA,IAAA,IAAA,GAAAA,GAAA,KAAA,IAAA;AAAA;kBAAA;AAAA,kBAAAD,KAAA9B,GAAA,KAAAe,IAAAgB,EAAA;gBAAA,SAAAhB,IAAA;AAAA,kBAAAe,KAAA,CAAA,GAAAf,EAAA,GAAAW,KAAA;gBAAA,UAAA;AAAA,kBAAAzB,KAAA0B,KAAA;gBAAA;AAAA,oBAAA,IAAAG,GAAA,CAAA,EAAA,OAAAA,GAAA,CAAA;AAAA,uBAAA,EAAA,OAAAA,GAAA,CAAA,IAAAA,GAAA,CAAA,IAAA,QAAA,MAAA,KAAA;cAAA,EAAA,CAAAA,IAAAG,EAAA,CAAA;YAAA;UAAA;QAAA,GAAA,IAAA,QAAA,KAAA,mBAAA,SAAAlB,IAAA;AAAA,iBAAAA,MAAAA,GAAA,aAAAA,KAAA,EAAA,SAAAA,GAAA;QAAA;AAAA,eAAA,eAAAf,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,WAAAA,GAAA,YAAA;ACDA,YAAA,IAAA,EAAAC,GAAA,GAAA,CAAA,GACA,IAAAA,GAAA,EAAA,GAqBMiC,IAAmB,EAAA,QAAMC,cAI5B,EACDvC,IAAI,MACJwC,MAAM,MACNC,SAAS,KAAA,CAAA,GAGLC,IAAoBJ,EAAiBK,UACrCC,IAAmBN,EAAiBO;AAE1C,QAAAzC,GAAA,YAAA,SAA0Be,IAAA;AAA1B,cAAAf,KAAA,MACEoC,KAAIrB,GAAA,MACJsB,KAAOtB,GAAA,SACP2B,KAAQ3B,GAAA;AAeR,iBAdgBA,GAAA,iBAEC4B,QAAQ,SAAOC,IAAAA;AAAuB,mBAAA,EAAA5C,IAAA,QAAA,QAAA,WAAA;AAAA,qBAAA,EAAA,MAAA,SAAAA,IAAA;AAAA,wBAAAA,GAAA,OAAA;kBAAA,KAAA;AACrD,2BAAA,CAAA,IAAM,GAAA,EAAA6C,cAAaT,IAAMC,IAAS,SAACS,IAAAA;AACjC,0BACMzB,KADkByB,GAAMC,cAAcC,OACrBC,kBACrBL,GAAOxB,OACPwB,GAAOM,WAAAA;AAETN,sBAAAA,GAAOO,YAAYR,QAAQ,SAACC,IAAAA;AAC1BvB,wBAAAA,GAAY+B,YAAYR,GAAOR,MAAMQ,GAAOS,SAAST,GAAOzC,OAAAA;sBAC9D,CAAA;oBACF,CAAA,CAAA;kBAAA,KAAA;AAAA,2BATAH,GAAA,KAAA,GAAA,CAAA,CAAA;gBAAA;cAAA,CAAA;YAAA,CAAA;UAAA,CAAA,GAYA,EAAA,QAAA,cAACsC,GAAiB,EAACgB,OAAO,EAAE1D,IAAI,MAAMwC,MAAInC,IAAEoC,SAAOX,GAAA,EAAA,GAChDgB,EAAAA;QAGP,GAsBA1C,GAAA,WAAA,SAAyBe,IAAA;AAAA,cAAE2B,KAAQ3B,GAAA,UAAEM,KAAWN,GAAA;AAC9C,iBACE,EAAA,QAAA,cAACyB,GAAgB,MACd,SAACc,IAAAA;AACQ,gBAAA1D,KAAsB0D,GAAK,IAAvBlB,KAAkBkB,GAAK,MAAjBjB,KAAYiB,GAAK;AAEnC,mBAAOZ,GAAS,EAAD,EAAG9C,IAAE+B,GAAA,IAAK,GAAA,EAAA4B,cAAanB,IAAMC,IAAShB,EAAAA,CAAAA,CAAAA;UACvD,CAAA;QAGN;MAAA,GAAA,IAAA,CAAAN,IAAAf,IAAAC,OAAA;AAAA,eAAA,eAAAD,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,SAAAA,GAAA,eAAAA,GAAA,oBAAAA,GAAA,eAAA;ACzFA,YAiPYuB,GAjPZ,IAAAtB,GAAA,GAAA,GAEA,IAAAA,GAAA,GAAA,GACA,IAAAA,GAAA,GAAA,GAaMuD,IACJC,OAAOD,aACDC,OAAQC,gBACRD,OAAQE,mBACRF,OAAQG;AAEhB,iBAAgBf,EACdgB,IACAxB,IACAyB,IAAAA;AAEA,iBAAO,IAAIC,QAAqB,SAACjD,IAASZ,IAAAA;AACxC,gBACIN,IADEoE,KAAUR,EAAUS,KAAKJ,IAAQxB,EAAAA;AAEvC2B,YAAAA,GAAQE,YAAY,WAAA;AAClBtE,cAAAA,KAAKoE,GAAQhB,QACblC,GAAQlB,EAAAA;YACV,GACAoE,GAAQzD,UAAU,WAAA;AAChBL,cAAAA,GAAO,oBAAA,OAAoB8D,GAAQxD,KAAAA,CAAAA;YACrC,GAC+B,cAAA,OAApBsD,OACTE,GAAQG,kBAAkB,SAACrB,IAAAA;AACzBgB,cAAAA,GAAgBhB,IAAOlD,EAAAA;YACzB;UAEJ,CAAA;QACF;AArBA,QAAAI,GAAA,eAAA,GAuBAA,GAAA,oBAAA,SACE6D,IACAxB,IACA+B,IAAAA;AAEA,cAAMJ,KAA4BR,EAAUS,KAAKJ,IAAQxB,EAAAA;AAEzD2B,UAAAA,GAAQG,kBAAkB,SAAUrB,IAAAA;AAClC,gBAAM9B,KAAyB8B,GAAMuB,OAAerB;AACpDoB,YAAAA,GAAazB,QAAQ,SAACQ,IAAAA;AACpB,kBAAA,CAAKnC,GAASlB,iBAAiBC,SAASoD,GAAY/B,KAAAA,GAAQ;AAC1D,oBAAMnB,KAAce,GAASiC,kBAC3BE,GAAY/B,OACZ+B,GAAYD,WAAAA;AAEdC,gBAAAA,GAAYA,YAAYR,QAAQ,SAACC,IAAAA;AAC/B,kBAAA3C,GAAYmD,YAAYR,GAAOR,MAAMQ,GAAOS,SAAST,GAAOzC,OAAAA;gBAC9D,CAAA;cAAA;YAEJ,CAAA,GACAa,GAASsD,MAAAA;UACX,GACAN,GAAQE,YAAY,SAAUnD,IAAAA;AAC5BA,YAAAA,GAAEsD,OAAOrB,OAAOsB,MAAAA;UAClB;QACF,GAEAtE,GAAA,eAAA,SACE6D,IACAxB,IACAkC,IAAAA;AA0JA,iBAAO,EACLC,KAvEU,SAAIlB,IAAUmB,IAAAA;AACxB,mBAAA,IAAIV,QAAgB,SAACjD,IAASZ,IAAAA;AAC5B2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAC1B,oBAMFoE,MANY,GAAA,EAAAW,4BAChB/E,IACA2E,IACAzD,IACAZ,EAAAA,EACD,MACqBsE,IAAIlB,IAAOmB,EAAAA;AAEjCT,gBAAAA,GAAQE,YAAY,SAACU,IAAAA;AACnBH,kBAAAA,KAAMG,GAAIP,OAAOrB,QACjBlC,GAAQ2D,EAAAA;gBACV,GAEAT,GAAQzD,UAAU,SAACC,IAAAA;AAAU,yBAAAN,GAAOM,EAAAA;gBAAP;cAC/B,CAAA;YACF,CAAA;UAjBA,GAuEAqE,SArIc,SAAIC,IAAAA;AAClB,mBAAA,IAAIf,QAAW,SAACjD,IAASZ,IAAAA;AACvB2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,EAAAA,IAC1B,GAAA,EAAA8E,2BAChBpF,IACA2E,IACAzD,IACAZ,EAAAA,EACD,MACqB+E,IAAIH,EAAAA,EAElBZ,YAAY,SAAUpB,IAAAA;AAC5BhC,kBAAAA,GAASgC,GAAMuB,OAAerB,MAAAA;gBAChC;cACF,CAAA;YACF,CAAA;UAfA,GAqIAkC,QA1Ja,WAAA;AACb,mBAAA,IAAInB,QAAa,SAACjD,IAASZ,IAAAA;AACzB2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,EAAAA;AACpC,oBAMF8D,MANY,GAAA,EAAAgB,2BAChBpF,IACA2E,IACAzD,IACAZ,EAAAA,EACD,MACqBgF,OAAAA;AAEtBlB,gBAAAA,GAAQzD,UAAU,SAACC,IAAAA;AAAU,yBAAAN,GAAOM,EAAAA;gBAAP,GAE7BwD,GAAQE,YAAY,SAAUnD,IAAA;AAAA,sBAAYiC,KAAMjC,GAAA,OAAA;AAC9CD,kBAAAA,GAAQkC,EAAAA;gBACV;cACF,CAAA;YACF,CAAA;UAjBA,GA0JAmC,QAtDa,SAAI7B,IAAUmB,IAAAA;AAC3B,mBAAA,IAAIV,QAAa,SAACjD,IAASZ,GAAAA;AACzB2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,CAAAA;AACtC,oBAAAF,MAAyB,GAAA,EAAA2E,4BAC7B/E,IACA2E,IACAzD,IACAZ,CAAAA,GAJMG,KAAWL,GAAA,aAAEoB,IAAKpB,GAAA;AAO1BK,gBAAAA,GAAYI,aAAa,SAACqC,IAAAA;AAAU,yBAAAhC,GAAQgC,EAAAA;gBAAR,GAEpC1B,EAAMgE,IAAI9B,IAAOmB,EAAAA;cACnB,CAAA;YACF,CAAA;UAdA,GAsDAY,cAtCmB,SAACZ,IAAAA;AACpB,mBAAA,IAAIV,QAAa,SAACjD,IAASZ,IAAAA;AACzB2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,EAAAA,IAC1B,GAAA,EAAAyE,4BAChB/E,IACA2E,IACAzD,IACAZ,EAAAA,EACD,MACqBoF,OAAOb,EAAAA,EAErBP,YAAY,SAACpB,IAAAA;AAAU,yBAAAhC,GAAQgC,EAAAA;gBAAR;cACjC,CAAA;YACF,CAAA;UAbA,GAsCAyC,OAvBY,WAAA;AACZ,mBAAA,IAAIxB,QAAc,SAACjD,IAASZ,IAAAA;AAC1B2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,EAAAA;AACtC,oBAAAF,MAAyB,GAAA,EAAA2E,4BAC7B/E,IACA2E,IACAzD,IACAZ,EAAAA,GAJMkB,KAAKpB,GAAA;AAAa,gBAAAA,GAAA,YAOdS,aAAa,WAAA;AAAM,yBAAAK,GAAAA;gBAAA,GAE/BM,GAAMmE,MAAAA;cACR,CAAA;YACF,CAAA;UAdA,GAuBAC,YAxHiB,SACjBC,IACAC,IAAAA;AAEA,mBAAO,IAAI3B,QAAc,SAACjD,IAASZ,GAAAA;AACjC2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,CAAAA,IAC1B,GAAA,EAAA8E,2BAChBpF,IACA2E,IACAzD,IACAZ,CAAAA,EACD,MACqBsF,WAAWE,EAAAA,EAEzBxB,YAAY,SAACpB,IAAAA;AACnB2C,kBAAAA,GAAe3C,EAAAA,GACfhC,GAAAA;gBACF;cACF,CAAA;YACF,CAAA;UACF,GAoGE6E,YAlGiB,SAACC,IAAmBnB,IAAAA;AACrC,mBAAA,IAAIV,QAAa,SAACjD,IAASZ,GAAAA;AACzB2C,gBAAagB,IAAQxB,EAAAA,EAASqC,KAAK,SAAC9E,IAAAA;AAAAA,iBAClC,GAAA,EAAAmF,2BAA0BnF,IAAI2E,IAAcrE,CAAAA,IAC1B,GAAA,EAAA8E,2BAChBpF,IACA2E,IACAzD,IACAZ,CAAAA,EACD,MACmB2F,MAAMD,EAAAA,EACJX,IAAIR,EAAAA,EAElBP,YAAY,SAACpB,IAAAA;AACnBhC,kBAAAA,GAA2BgC,GAAMuB,OAAQrB,MAAAA;gBAC3C;cACF,CAAA;YACF,CAAA;UAhBA,EAAA;QAmGJ,IAEYzB,IAAAvB,GAAAuB,WAAAvB,GAAAuB,SAAM,CAAA,IAChB,WAAA,YACA,EAAA,YAAA;MAAA,GAAA,KAAA,CAAAR,IAAAf,IAAAC,OAAA;AAAA,eAAA,eAAAD,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,eAAAA,GAAA,SAAA;ACpPF,YAAA,IAAAC,GAAA,GAAA,GACA,IAAAA,GAAA,EAAA,GA0BM6F,IAA4D,EAChEzD,SAAS,MACTD,MAAM,KAAA;AAGR,QAAApC,GAAA,SAAA,SAAuBe,IAAA;AAAA,cAAEqB,KAAIrB,GAAA,MAAEsB,KAAOtB,GAAA,SAAEgF,KAAgBhF,GAAA;AACtD+E,YAAuB1D,OAAOA,IAC9B0D,EAAuBzD,UAAUA,IACjC2D,OAAOC,OAAOH,CAAAA,IACd,GAAA,EAAAI,mBAAkB9D,IAAMC,IAAS0D,EAAAA;QACnC,GAEA/F,GAAA,eAAA,SAA6BqB,IAAAA;AAa3B,cAAA,CAAKyE,EAAuB1D,QAAAA,CAAS0D,EAAuBzD,QAC1D,OAAM,IAAI8D,MAAM,2CAAA;AAElB,kBAAO,GAAA,EAAAC,SACL,WAAA;AACE,oBAAA,GAAA,EAAA7C,cACEuC,EAAuB1D,MACvB0D,EAAuBzD,SACvBhB,EAAAA;UAHF,GAKF,CAACyE,GAAwBzE,EAAAA,CAAAA;QAE7B;MAAA,GAAA,KAAA,CAAAN,OAAA;AChEAsF,QAAAA,GAAOC,UAAUC;MAAQ,EAAA,GCCrBC,IAA2B,CAAC,GCE5BC,IDCJ,SAASC,GAAoBC,GAAAA;AAE5B,YAAIC,IAAeJ,EAAyBG,CAAAA;AAC5C,YAAA,WAAIC,EACH,QAAOA,EAAaN;AAGrB,YAAID,IAASG,EAAyBG,CAAAA,IAAY,EAGjDL,SAAS,CAAC,EAAA;AAOX,eAHAO,EAAoBF,CAAAA,EAAUG,KAAKT,EAAOC,SAASD,GAAQA,EAAOC,SAASI,EAAAA,GAGpEL,EAAOC;MACf,ECnB8C,GAAA;AAAA,aAAA,UAAA;IAAA,GAAA;;;",
  "names": ["validateStoreName", "db", "storeName", "objectStoreNames", "contains", "n", "t", "reject", "options", "trans", "transaction", "dbMode", "onerror", "error", "oncomplete", "complete", "onabort", "abort", "type", "resolve", "e", "database", "mode", "createTransaction", "buildOptions", "store", "objectStore", "createDatabaseTransaction", "DBMode", "readonly", "readwrite", "r", "o", "AccessDB", "IndexedDB", "a", "i", "u", "c", "IndexedDBContext", "createContext", "name", "version", "IndexedDBProvider", "Provider", "IndexedDBCosumer", "Consumer", "children", "forEach", "schema", "openDatabase", "event", "currentTarget", "result", "createObjectStore", "storeConfig", "storeSchema", "createIndex", "keypath", "value", "DBOperations", "indexedDB", "window", "mozIndexedDB", "webkitIndexedDB", "msIndexedDB", "dbName", "upgradeCallback", "Promise", "request", "open", "onsuccess", "onupgradeneeded", "storeSchemas", "target", "close", "currentStore", "add", "key", "then", "createReadwriteTransaction", "evt", "getByID", "id", "validateBeforeTransaction", "createReadonlyTransaction", "get", "getAll", "update", "put", "deleteRecord", "delete", "clear", "openCursor", "cursorCallback", "keyRange", "getByIndex", "indexName", "index", "indexeddbConfiguration", "objectStoresMeta", "Object", "freeze", "CreateObjectStore", "Error", "useMemo", "module", "exports", "require", "__webpack_module_cache__", "__webpack_exports__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "call"]
}
